# Hey, Copilot! I want you to give me a data structure assignment where I have
# to implement a class (and its standard methods) with custom code. Thanks!

# Path: codge_data_structures\arrays\linked_list.py
# Compare this snippet from codge_data_structures\arrays\queue.py:
"""
Day 3: Linked List

Docstring Generated by Copilot:
===============================
Linked lists are another common data structure. You should know how to
implement one. The basic idea is that you can add and remove items from the
"front" of the linked list in O(1) time. You can think of it like a line at a
grocery store. If you want to add a person to the line, you just place them at
the back. If you want to remove a person from the line, you always remove them
from the front. First person added is the first person that gets removed. This
is called FIFO (First In First Out).

I'm going to need you to do some work for me. I need you to write a class for
a linked list. It should have the methods add_to_tail, remove_head, and size.
FIFO (first in first out) means that the first element added to the linked list
should be the first one removed. So if you add_to_tail 1, and then add_to_tail
2, and then add_to_tail 3, you'll need to remove_head 1 first, then 2, then 3.
Make sure you return the value that is being removed.

Example usage:
ll = LinkedList()
ll.add_to_tail(1)
ll.add_to_tail(2)
ll.add_to_tail(3)
ll.size() # should return 3
ll.remove_head() # should return 1
ll.remove_head() # should return 2
ll.remove_head() # should return 3
ll.size() # should return 0
"""
from __future__ import annotations
from typing import Any, Union, Optional






if __name__ == '__main__':
    import doctest
    print()
    doctest.testmod()
    print()
